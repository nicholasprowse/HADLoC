/*
This program demonstrates how to convert a binary number into base 10.
It takes a 16 bit number defined in the definition 'number_to_print', and converts it to a decimal string, then prints
this to the display
*/

define int_to_string_arg_L 0
define int_to_string_arg_H 1
define mod10 2
define print_string_arg 3
define loop_counter 4
define counter 5

// Holds the string. First element is the length of the string
define decimal_string 50
define number_to_print 1729


ldb 0
mov L H

// Initialise display
ldb 0x01
opi L
mov L X
start_loop:
	inc X X
	ldb end_loop
	jeq
	ldb start_loop
	jmp

end_loop:
ldb 0x38
opi L
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

ldb 0x0E
opi L
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

ldb 0x06
opi L

// load number to print in to int_to_string argument
ldu number_to_print
mov L X
ldb int_to_string_arg_H
mov X M
ldb number_to_print
mov L X
ldb int_to_string_arg_L
mov X M

lda int_to_string
jmp

// Prints string where first element is the length of the string
print_string:
    // counter = string length
    lda decimal_string
    mov M X
    ldb counter
    mov X M

    // loop until counter = 0
    while_loop1:
        // load counter, add it to string and output data there
        lda counter
        mov M X
        ldb decimal_string
        add L X L
        opd M

        // decrement counter and jump to start of loop if it is not 0
        ldb counter
        dec X M
        mov X M
        lda while_loop1
        jne
    hlt

/*
Algorithm
def int_to_str(n):
    result = ""
    while (n & 0xFFFF) != 0:
        mod10 = 0
        for _ in range(16):
            mod10 <<= 1
            mod10 += 1 if(n & 0x8000) else 0
            n <<= 1
            if mod10 >= 10:
                mod10 -= 10
                n += 1
        result += str(mod10)
    return result
*/
// 16 bit integer to string
int_to_string:
    // Store 0 into string (i.e. string starts with length 0)
    ldb 0
    mov L X
    lda decimal_string
    mov X M

    while_loop:
        // mod10 = 0
        ldb 0
        mov L X
        lda mod10
        mov X M
        // Load 16 into loop_counter
        ldb 16
        mov L X
        ldb loop_counter
        mov X M
        // Loop 16 times
        for_loop:
            // shift mod10
            lda mod10
            mov M X
            add X X M
            mov X M

            // shift upper part of argument
            lda int_to_string_arg_H
            mov M X
            add X X M
            mov X M

            // If this carried, add to mod10
            lda add_mod10
            jcs
            lda skip_add_mod10
            jmp

            add_mod10:
            lda mod10
            inc X M
            mov X M

            skip_add_mod10:
            // shift lower part of argument
            lda int_to_string_arg_L
            mov M X
            add X X M
            mov X M

            // If this carried add to upper part of argument
            lda add_upper_arg
            jcs
            lda skip_add_upper_arg
            jmp

            add_upper_arg:
            lda int_to_string_arg_H
            inc X M
            mov X M

            skip_add_upper_arg:

            // If mod10 >= 10, subtract 10 and add 1 to argument
            // subtract 10 from mod10
            ldb 10
            mov L X
            lda mod10
            sub X M X

            // If the result is greater than or equal to zero, store the result in mod10 and add 1 to argument
            lda skip_if_statement
            jlt

                // Store result in mod10
                lda mod10
                mov X M
                // increment argument
                ldb int_to_string_arg_L
                inc X M
                mov X M
                // skip incrementing upper part if increment didn't carry
                lda skip_if_statement
                jcs
                lda int_to_string_arg_H
                inc X M
                mov X M

            skip_if_statement:

            // decrement loop counter and jump back to start of loop if not equal to 0
            ldb loop_counter
            dec X M
            mov X M
            lda for_loop
            jne

        // Add mod10 to the string
        // Load mod10, add '0' and store in Y
        ldb '0'
        mov L X
        lda mod10
        add X X M
        mov X Y
        // Get length of string, increment it, and add to address to get next location
        ldb decimal_string
        inc X M
        mov X M
        add L X L
        // Put mod10 into this location
        mov Y M

        // jump to while loop if n is not equal to 0
        ldb int_to_string_arg_H
        mov M X
        ldb int_to_string_arg_L
        or X X M
        lda while_loop
        jne
lda print_string
jmp
