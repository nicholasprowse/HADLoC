/*
This program computes all primes less than 256 using a prime sieve, then prints them out one by one when an input
signal is received. Numbers are converted to base 10 before printing
*/
define i 0
define j 1
define int_to_string_arg 2
define mod10 3
define loop_counter 4
define counter 5

define decimal_string 50

ldb 0
mov L H

// Initialise display
ldb 0x38
opi L
ldb 5
mov L X
ldb delay_loop1
delay_loop1:
    dec X X
    jgt

ldb 0x0E
opi L
ldb 5
mov L X
ldb delay_loop2
delay_loop2:
    dec X X
    jgt

ldb 0x06
opi L
ldb 5
mov L X
ldb delay_loop3
delay_loop3:
    dec X X
    jgt

// Clear display
ldb 0x01
opi L

// 0 -> prime
// -1 -> not prime

// Set sieve to 0
ldb 0
mov L Y		// Y = 0

ldb 2
mov L X		// X = 2

clear_loop:
	ldb 1
	mov L H
	mov X L
	mov Y M		// Mem[X] = 0

	inc X X
	lda clear_loop
	jcs

lda 0
not X L
lda 256
mov X M

ldb 1
mov X M		// sieve[0] = sieve[1] = -1

ldb 0
mov L H

ldb 2
mov L X
ldb i
mov X M		// i = 2

start_outer_loop:
	ldb 16
	mov L X
	ldb i
	sub X M X
	ldb end_outer_loop
	jgt						// break out of loop if i > 16

	ldb i
	mov M X
	ldb 1
	mov L H
	mov X L
	mov M X					// X = sieve[i]

	lda end_if
	jne						// if(sieve[i] == 0)

if:
	ldb i
	mov M X
	add X X M
	ldb j
	mov X M					// j = 2*i

inner_loop:
	ldb 0
	not L L
	mov L Y					// Y = -1

	ldb j
	mov M X
	ldb 1
	mov L H
	mov X L
	mov Y M					// sieve[j] = Y = -1

	lda i
	mov M X
	ldb j
	add X X M
	mov X M

	ldb end_if
	jcs					// exit loop if j has overflowed (greater than 255)
	ldb inner_loop
	jmp

end_if:
	ldb i
	inc X M
	mov X M					// increment i
	ldb start_outer_loop
	jmp						// back to start of loop

end_outer_loop:
	ldb 2
	mov L X
	ldb i
	mov X M		// i = 2

wait_in_loop:
	ldb next_prime
	jis
	ldb wait_in_loop
	jmp

next_prime:
	mov I X
	ldb i
	mov M X
	ldb int_to_string_arg
	mov X M
	ldb int_to_string
	jmp			// print i

return_print:
	ldb i
	mov M Y		// Y = i

count_loop:
	mov Y X
	inc X X
	mov X Y		// Y++
	ldb 1
	mov L H
	mov Y L
	mov M X
	lda count_loop
	jne

	ldb i
	mov Y M
	ldb wait_in_loop
	jmp


/*
int[] sieve = new int[256];
int i = 2;
while(i <= 16) {
	if(sieve[i] == 0) {
		int j = 2*i;
		while(j < 256) {
			sieve[j] = -1;
			j = j + i;
		}
	}
	i = i + 1;
}
*/

/*
Algorithm
def int_to_str(n):
    result = ""
    while (n & 0xFFFF) != 0:
        mod10 = 0
        for _ in range(16):
            mod10 <<= 1
            mod10 += 1 if(n & 0x8000) else 0
            n <<= 1
            if mod10 >= 10:
                mod10 -= 10
                n += 1
        result += str(mod10)
    return result
*/

int_to_string:
	ldb 0x01
   	opi L			// Reset display
	mov L X
	ldb delay_loop4
delay_loop4:
    nop
    nop
    nop
	inc X X
	jgt

    // Store 0 into string (i.e. string starts with length 0)
    ldb 0
    mov L X
    ldb decimal_string
    mov X M

    while_loop:
        // mod10 = 0
        ldb 0
        mov L X
        ldb mod10
        mov X M
        // Load 16 into loop_counter
        ldb 8
        mov L X
        ldb loop_counter
        mov X M
        // Loop 16 times
        for_loop:
            // shift mod10
            ldb mod10
            mov M X
            add X X M
            mov X M

            // shift the argument
            ldb int_to_string_arg
            mov M X
            add X X M
            mov X M

            // If this carried, add to mod10
            ldb add_mod10
            jcs
            ldb skip_add_mod10
            jmp

            add_mod10:
            ldb mod10
            inc X M
            mov X M

            skip_add_mod10:

            // If mod10 >= 10, subtract 10 and add 1 to argument
            // subtract 10 from mod10
            ldb 10
            mov L X
            ldb mod10
            sub X M X

            // If the result is greater than or equal to zero, store the result in mod10 and add 1 to argument
            ldb skip_if_statement
            jlt

                // Store result in mod10
                ldb mod10
                mov X M
                // increment argument
                ldb int_to_string_arg
                inc X M
                mov X M

            skip_if_statement:

            // decrement loop counter and jump back to start of loop if not equal to 0
            ldb loop_counter
            dec X M
            mov X M
            ldb for_loop
            jne

        // Add mod10 to the string
        // Load mod10, add '0' and store in Y
        ldb '0'
        mov L X
        ldb mod10
        add X X M
        mov X Y
        // Get length of string, increment it, and add to address to get next location
        ldb decimal_string
        inc X M
        mov X M
        add L X L
        // Put mod10 into this location
        mov Y M

        // jump to while loop if n is not equal to 0
        ldb int_to_string_arg
        mov M X
        ldb while_loop
        jne

    // Print string where first element is the length of the string
    // counter = string length
    ldb decimal_string
    mov M X
    ldb counter
    mov X M

    // loop until counter = 0
    while_loop1:
        // load counter, add it to string and output data there
        ldb counter
        mov M X
        ldb decimal_string
        add L X L
        opd M

        // decrement counter and jump to start of loop if it is not 0
        ldb counter
        dec X M
        mov X M
        ldb while_loop1
        nop
        nop
        nop
        nop
        nop
        jne
    // Load return address
    ldb return_print
    jmp
